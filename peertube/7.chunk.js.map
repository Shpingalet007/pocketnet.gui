{"version":3,"sources":["webpack:///./src/assets/player/webtorrent/peertube-chunk-store.ts","webpack:///./src/assets/player/webtorrent/video-renderer.ts","webpack:///./src/assets/player/webtorrent/webtorrent-plugin.ts"],"names":["ChunkDatabase","dbname","super","this","version","stores","chunks","ExpirationDatabase","databases","PeertubeChunkStore","chunkLength","opts","pendingPut","memoryChunks","databaseName","torrent","infoHash","setMaxListeners","Number","Error","length","Infinity","lastChunkLength","lastChunkIndex","Math","ceil","db","expirationDB","runCleaner","index","buf","cb","isLastChunk","nextTick","push","id","putBulkTimeout","setTimeout","processing","undefined","transaction","bulkPut","map","p","err","console","log","forEach","BUFFERING_PUT_MS","get","memoryChunk","process","result","Buffer","alloc","offset","len","slice","catch","error","destroy","clearTimeout","cleanerInterval","clearInterval","close","dropDatabase","checkExpiration","setInterval","CLEANER_INTERVAL_MS","databasesToDeleteInfo","put","name","expiration","Date","getTime","CLEANER_EXPIRATION_MS","now","where","below","toArray","databaseToDeleteInfo","dbToDelete","delete","val","MediaElementWrapper","videostream","VIDEOSTREAM_EXTS","renderVideo","file","elem","callback","createReadStream","validateFile","extension","toLowerCase","preparedElem","renderer","currentTime","indexOf","useVideostream","useMediaSource","prepareElem","addEventListener","onError","removeEventListener","onLoadStart","useVP9","codecs","ext","getCodec","fallbackToMediaSource","wrapper","writable","createWriteStream","pipe","autoplay","play","renderMedia","CacheChunkStore","Plugin","getPlugin","player","options","startTime","CONSTANTS","INFO_SCHEDULER","AUTO_QUALITY_SCHEDULER","AUTO_QUALITY_THRESHOLD_PERCENT","AUTO_QUALITY_OBSERVATION_TIME","AUTO_QUALITY_HIGHER_RESOLUTION_DELAY","BANDWIDTH_AVERAGE_NUMBER_OF_VALUES","webtorrent","tracker","rtcConfig","dht","destroyingFakeRenderer","autoResolution","autoResolutionPossible","isAutoResolutionObservation","playerRefusedP2P","downloadSpeeds","videoFiles","videoDuration","savePlayerSrcFunction","src","playerElement","ready","options_","duration","initializePlayer","runTorrentInfoScheduler","one","runAutoQualitySchedulerTimer","runAutoQualityScheduler","addTorrentDelay","qualityObservationTimer","torrentInfoInterval","autoQualityInterval","flushVideoFile","currentVideoFile","destroyFakeRenderer","resolution","videoFile","done","savedAverageBandwidth","getAppropriateFile","pickAverageVideoFile","magnetUri","disableErrorDisplay","oldPlaybackRate","playbackRate","previousVideoFile","fallbackToHttp","addTorrent","changeQuality","trigger","auto","resolutionId","delay","paused","bigPlayButton","hide","addClass","posterImage","show","removeClass","newVideoFile","find","f","forcePlay","seek","updateVideoFile","destroyRenderer","remove","getCurrentResolutionId","forbid","possible","magnetOrTorrentUrl","oldTorrent","torrentOptions","store","storeOpts","max","add","stopTorrent","renderFileInFakeElement","files","controls","tryToPlay","pause","on","message","newOptions","handleError","playPromise","then","time","handleTechSeeked_","averageDownloadSpeed","filter","progress","ended","getAndSaveActualDownloadSpeed","playerHeight","offsetHeight","maxResolution","i","filteredFiles","fileBitrate","size","threshold","start","lastDownloadSpeeds","sum","reduce","a","b","averageBandwidth","round","buildQualities","oldPlay","bind","changeResolution","changeResolutionDelay","isPlayerWaiting","updateResolution","hasClass","downloadSpeed","source","http","uploadSpeed","downloaded","uploaded","p2p","numPeers","disableAutoResolution","enableErrorDisplay","httpUrl","fileUrl","floor","removePeer","fakeVideoElem","document","createElement","fakeRenderer","qualityLevelsPayload","representation","label","buildQualityLabel","height","_enabled","qualityLevels","addQualityLevel","selected","payload","qualitySwitchCallback","d","qualityData","video","tech","fps","enableAutoResolution","selectedIndex_","selectedIndex","registerPlugin"],"mappings":"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","file":"7.chunk.js?v=4893","sourcesContent":["// From https://github.com/MinEduTDF/idb-chunk-store\n// We use temporary IndexDB (all data are removed on destroy) to avoid RAM issues\n// Thanks @santiagogil and @Feross\n\nimport { EventEmitter } from 'events'\nimport Dexie from 'dexie'\n\nclass ChunkDatabase extends Dexie {\n  chunks: Dexie.Table<{ id: number, buf: Buffer }, number>\n\n  constructor (dbname: string) {\n    super(dbname)\n\n    this.version(1).stores({\n      chunks: 'id'\n    })\n  }\n}\n\nclass ExpirationDatabase extends Dexie {\n  databases: Dexie.Table<{ name: string, expiration: number }, number>\n\n  constructor () {\n    super('webtorrent-expiration')\n\n    this.version(1).stores({\n      databases: 'name,expiration'\n    })\n  }\n}\n\nexport class PeertubeChunkStore extends EventEmitter {\n  private static readonly BUFFERING_PUT_MS = 1000\n  private static readonly CLEANER_INTERVAL_MS = 1000 * 60 // 1 minute\n  private static readonly CLEANER_EXPIRATION_MS = 1000 * 60 * 5 // 5 minutes\n\n  chunkLength: number\n\n  private pendingPut: { id: number, buf: Buffer, cb: Function }[] = []\n  // If the store is full\n  private memoryChunks: { [ id: number ]: Buffer | true } = {}\n  private databaseName: string\n  private putBulkTimeout: any\n  private cleanerInterval: any\n  private db: ChunkDatabase\n  private expirationDB: ExpirationDatabase\n  private readonly length: number\n  private readonly lastChunkLength: number\n  private readonly lastChunkIndex: number\n\n  constructor (chunkLength: number, opts: any) {\n    super()\n\n    this.databaseName = 'webtorrent-chunks-'\n\n    if (!opts) opts = {}\n    if (opts.torrent && opts.torrent.infoHash) this.databaseName += opts.torrent.infoHash\n    else this.databaseName += '-default'\n\n    this.setMaxListeners(100)\n\n    this.chunkLength = Number(chunkLength)\n    if (!this.chunkLength) throw new Error('First argument must be a chunk length')\n\n    this.length = Number(opts.length) || Infinity\n\n    if (this.length !== Infinity) {\n      this.lastChunkLength = (this.length % this.chunkLength) || this.chunkLength\n      this.lastChunkIndex = Math.ceil(this.length / this.chunkLength) - 1\n    }\n\n    this.db = new ChunkDatabase(this.databaseName)\n    // Track databases that expired\n    this.expirationDB = new ExpirationDatabase()\n\n    this.runCleaner()\n  }\n\n  put (index: number, buf: Buffer, cb: (err?: Error) => void) {\n    const isLastChunk = (index === this.lastChunkIndex)\n    if (isLastChunk && buf.length !== this.lastChunkLength) {\n      return this.nextTick(cb, new Error('Last chunk length must be ' + this.lastChunkLength))\n    }\n    if (!isLastChunk && buf.length !== this.chunkLength) {\n      return this.nextTick(cb, new Error('Chunk length must be ' + this.chunkLength))\n    }\n\n    // Specify we have this chunk\n    this.memoryChunks[index] = true\n\n    // Add it to the pending put\n    this.pendingPut.push({ id: index, buf, cb })\n    // If it's already planned, return\n    if (this.putBulkTimeout) return\n\n    // Plan a future bulk insert\n    this.putBulkTimeout = setTimeout(async () => {\n      const processing = this.pendingPut\n      this.pendingPut = []\n      this.putBulkTimeout = undefined\n\n      try {\n        await this.db.transaction('rw', this.db.chunks, () => {\n          return this.db.chunks.bulkPut(processing.map(p => ({ id: p.id, buf: p.buf })))\n        })\n      } catch (err) {\n        console.log('Cannot bulk insert chunks. Store them in memory.', { err })\n\n        processing.forEach(p => this.memoryChunks[ p.id ] = p.buf)\n      } finally {\n        processing.forEach(p => p.cb())\n      }\n    }, PeertubeChunkStore.BUFFERING_PUT_MS)\n  }\n\n  get (index: number, opts: any, cb: (err?: Error, buf?: Buffer) => void): void {\n    if (typeof opts === 'function') return this.get(index, null, opts)\n\n    // IndexDB could be slow, use our memory index first\n    const memoryChunk = this.memoryChunks[index]\n    if (memoryChunk === undefined) {\n      const err = new Error('Chunk not found') as any\n      err['notFound'] = true\n\n      return process.nextTick(() => cb(err))\n    }\n\n    // Chunk in memory\n    if (memoryChunk !== true) return cb(null, memoryChunk)\n\n    // Chunk in store\n    this.db.transaction('r', this.db.chunks, async () => {\n      const result = await this.db.chunks.get({ id: index })\n      if (result === undefined) return cb(null, Buffer.alloc(0))\n\n      const buf = result.buf\n      if (!opts) return this.nextTick(cb, null, buf)\n\n      const offset = opts.offset || 0\n      const len = opts.length || (buf.length - offset)\n      return cb(null, buf.slice(offset, len + offset))\n    })\n    .catch(err => {\n      console.error(err)\n      return cb(err)\n    })\n  }\n\n  close (cb: (err?: Error) => void) {\n    return this.destroy(cb)\n  }\n\n  async destroy (cb: (err?: Error) => void) {\n    try {\n      if (this.pendingPut) {\n        clearTimeout(this.putBulkTimeout)\n        this.pendingPut = null\n      }\n      if (this.cleanerInterval) {\n        clearInterval(this.cleanerInterval)\n        this.cleanerInterval = null\n      }\n\n      if (this.db) {\n        this.db.close()\n\n        await this.dropDatabase(this.databaseName)\n      }\n\n      if (this.expirationDB) {\n        this.expirationDB.close()\n        this.expirationDB = null\n      }\n\n      return cb()\n    } catch (err) {\n      console.error('Cannot destroy peertube chunk store.', err)\n      return cb(err)\n    }\n  }\n\n  private runCleaner () {\n    this.checkExpiration()\n\n    this.cleanerInterval = setInterval(async () => {\n      this.checkExpiration()\n    }, PeertubeChunkStore.CLEANER_INTERVAL_MS)\n  }\n\n  private async checkExpiration () {\n    let databasesToDeleteInfo: { name: string }[] = []\n\n    try {\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, async () => {\n        // Update our database expiration since we are alive\n        await this.expirationDB.databases.put({\n          name: this.databaseName,\n          expiration: new Date().getTime() + PeertubeChunkStore.CLEANER_EXPIRATION_MS\n        })\n\n        const now = new Date().getTime()\n        databasesToDeleteInfo = await this.expirationDB.databases.where('expiration').below(now).toArray()\n      })\n    } catch (err) {\n      console.error('Cannot update expiration of fetch expired databases.', err)\n    }\n\n    for (const databaseToDeleteInfo of databasesToDeleteInfo) {\n      await this.dropDatabase(databaseToDeleteInfo.name)\n    }\n  }\n\n  private async dropDatabase (databaseName: string) {\n    const dbToDelete = new ChunkDatabase(databaseName)\n    console.log('Destroying IndexDB database %s.', databaseName)\n\n    try {\n      await dbToDelete.delete()\n\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, () => {\n        return this.expirationDB.databases.where({ name: databaseName }).delete()\n      })\n    } catch (err) {\n      console.error('Cannot delete %s.', databaseName, err)\n    }\n  }\n\n  private nextTick <T> (cb: (err?: Error, val?: T) => void, err: Error, val?: T) {\n    process.nextTick(() => cb(err, val), undefined)\n  }\n}\n","// Thanks: https://github.com/feross/render-media\n// TODO: use render-media once https://github.com/feross/render-media/issues/32 is fixed\n\nconst MediaElementWrapper = require('mediasource')\nimport { extname } from 'path'\nconst videostream = require('videostream')\n\nconst VIDEOSTREAM_EXTS = [\n  '.m4a',\n  '.m4v',\n  '.mp4'\n]\n\ntype RenderMediaOptions = {\n  controls: boolean\n  autoplay: boolean\n}\n\nfunction renderVideo (\n  file: any,\n  elem: HTMLVideoElement,\n  opts: RenderMediaOptions,\n  callback: (err: Error, renderer: any) => void\n) {\n  validateFile(file)\n\n  return renderMedia(file, elem, opts, callback)\n}\n\nfunction renderMedia (file: any, elem: HTMLVideoElement, opts: RenderMediaOptions, callback: (err: Error, renderer?: any) => void) {\n  const extension = extname(file.name).toLowerCase()\n  let preparedElem: any\n  let currentTime = 0\n  let renderer: any\n\n  try {\n    if (VIDEOSTREAM_EXTS.indexOf(extension) >= 0) {\n      renderer = useVideostream()\n    } else {\n      renderer = useMediaSource()\n    }\n  } catch (err) {\n    return callback(err)\n  }\n\n  function useVideostream () {\n    prepareElem()\n\n\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      return callback(err)\n    })\n\n\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\n    return new videostream(file, preparedElem)\n  }\n\n  function useMediaSource (useVP9 = false) {\n    const codecs = getCodec(file.name, useVP9)\n\n\n    prepareElem()\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      // Try with vp9 before returning an error\n      if (codecs.indexOf('vp8') !== -1) return fallbackToMediaSource(true)\n\n      return callback(err)\n    })\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\n\n    const wrapper = new MediaElementWrapper(preparedElem)\n    const writable = wrapper.createWriteStream(codecs)\n    file.createReadStream().pipe(writable)\n\n    if (currentTime) preparedElem.currentTime = currentTime\n\n    return wrapper\n  }\n\n  function fallbackToMediaSource (useVP9 = false) {\n    if (useVP9 === true) console.log('Falling back to media source with VP9 enabled.')\n    else console.log('Falling back to media source..')\n\n    useMediaSource(useVP9)\n  }\n\n  function prepareElem () {\n    if (preparedElem === undefined) {\n      preparedElem = elem\n\n      preparedElem.addEventListener('progress', function () {\n        currentTime = elem.currentTime\n      })\n    }\n  }\n\n  function onLoadStart () {\n    preparedElem.removeEventListener('loadedmetadata', onLoadStart)\n\n\n    if (opts.autoplay) preparedElem.play()\n\n    callback(null, renderer)\n  }\n}\n\nfunction validateFile (file: any) {\n  if (file == null) {\n    throw new Error('file cannot be null or undefined')\n  }\n  if (typeof file.name !== 'string') {\n    throw new Error('missing or invalid file.name property')\n  }\n  if (typeof file.createReadStream !== 'function') {\n    throw new Error('missing or invalid file.createReadStream property')\n  }\n}\n\nfunction getCodec (name: string, useVP9 = false) {\n  const ext = extname(name).toLowerCase()\n  if (ext === '.mp4') {\n    return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"'\n  }\n\n  if (ext === '.webm') {\n    if (useVP9 === true) return 'video/webm; codecs=\"vp9, opus\"'\n\n    return 'video/webm; codecs=\"vp8, vorbis\"'\n  }\n\n  return undefined\n}\n\nexport {\n  renderVideo\n}\n","import videojs from 'video.js'\nimport * as WebTorrent from 'webtorrent'\nimport { renderVideo } from './video-renderer'\nimport { LoadedQualityData, PlayerNetworkInfo, WebtorrentPluginOptions } from '../peertube-videojs-typings'\nimport { getRtcConfig, timeToInt, videoFileMaxByResolution, videoFileMinByResolution, isIOS, isSafari } from '../utils'\nimport { PeertubeChunkStore } from './peertube-chunk-store'\nimport {\n  getAverageBandwidthInStore,\n  getStoredMute,\n  getStoredP2PEnabled,\n  getStoredVolume,\n  saveAverageBandwidth\n} from '../peertube-player-local-storage'\nimport { VideoFile } from '@shared/models'\n\nconst CacheChunkStore = require('cache-chunk-store')\n\ntype PlayOptions = {\n  forcePlay?: boolean,\n  seek?: number,\n  delay?: number\n}\n\nconst Plugin = videojs.getPlugin('plugin')\n\nclass WebTorrentPlugin extends Plugin {\n  readonly videoFiles: VideoFile[]\n\n  private readonly playerElement: HTMLVideoElement\n\n  private readonly autoplay: boolean = false\n  private readonly startTime: number = 0\n  private readonly savePlayerSrcFunction: videojs.Player['src']\n  private readonly videoDuration: number\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000, // Don't change this\n    AUTO_QUALITY_SCHEDULER: 3000, // Check quality every 3 seconds\n    AUTO_QUALITY_THRESHOLD_PERCENT: 30, // Bandwidth should be 30% more important than a resolution bitrate to change to it\n    AUTO_QUALITY_OBSERVATION_TIME: 10000, // Wait 10 seconds after having change the resolution before another check\n    AUTO_QUALITY_HIGHER_RESOLUTION_DELAY: 5000, // Buffering higher resolution during 5 seconds\n    BANDWIDTH_AVERAGE_NUMBER_OF_VALUES: 5 // Last 5 seconds to build average bandwidth\n  }\n\n  private readonly webtorrent = new WebTorrent({\n    tracker: {\n      rtcConfig: getRtcConfig()\n    },\n    dht: false\n  })\n\n  private currentVideoFile: VideoFile\n  private torrent: WebTorrent.Torrent\n\n  private renderer: any\n  private fakeRenderer: any\n  private destroyingFakeRenderer = false\n\n  private autoResolution = true\n  private autoResolutionPossible = true\n  private isAutoResolutionObservation = false\n  private playerRefusedP2P = false\n\n  private torrentInfoInterval: any\n  private autoQualityInterval: any\n  private addTorrentDelay: any\n  private qualityObservationTimer: any\n  private runAutoQualitySchedulerTimer: any\n\n  private downloadSpeeds: number[] = []\n\n  constructor (player: videojs.Player, options?: WebtorrentPluginOptions) {\n    super(player)\n\n    this.startTime = timeToInt(options.startTime)\n\n    // Disable auto play on iOS\n    this.autoplay = options.autoplay\n    this.playerRefusedP2P = !getStoredP2PEnabled()\n\n    this.videoFiles = options.videoFiles\n    this.videoDuration = options.videoDuration\n\n    this.savePlayerSrcFunction = this.player.src\n    this.playerElement = options.playerElement\n\n    this.player.ready(() => {\n      const playerOptions = this.player.options_\n\n      /*const volume = getStoredVolume()\n      if (volume !== undefined) this.player.volume(volume)\n\n      const muted = playerOptions.muted !== undefined ? playerOptions.muted : getStoredMute()\n      if (muted !== undefined) this.player.muted(muted)*/\n\n      this.player.duration(options.videoDuration)\n\n      this.initializePlayer()\n      this.runTorrentInfoScheduler()\n\n      this.player.one('play', () => {\n        // Don't run immediately scheduler, wait some seconds the TCP connections are made\n        this.runAutoQualitySchedulerTimer = setTimeout(() => this.runAutoQualityScheduler(), this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n      })\n    })\n  }\n\n  dispose () {\n    clearTimeout(this.addTorrentDelay)\n    clearTimeout(this.qualityObservationTimer)\n    clearTimeout(this.runAutoQualitySchedulerTimer)\n\n    clearInterval(this.torrentInfoInterval)\n    clearInterval(this.autoQualityInterval)\n\n    // Don't need to destroy renderer, video player will be destroyed\n    this.flushVideoFile(this.currentVideoFile, false)\n\n    this.destroyFakeRenderer()\n  }\n\n  getCurrentResolutionId () {\n    return this.currentVideoFile ? this.currentVideoFile.resolution.id : -1\n  }\n\n  updateVideoFile (\n    videoFile?: VideoFile,\n    options: {\n      forcePlay?: boolean,\n      seek?: number,\n      delay?: number\n    } = {},\n    done: () => void = () => { /* empty */ }\n  ) {\n    // Automatically choose the adapted video file\n    if (!videoFile) {\n      const savedAverageBandwidth = getAverageBandwidthInStore()\n      videoFile = savedAverageBandwidth\n        ? this.getAppropriateFile(savedAverageBandwidth)\n        : this.pickAverageVideoFile()\n    }\n\n    if (!videoFile) {\n      \n      throw Error(`Can't update video file since videoFile is undefined.`)\n\n      /*\n\n      const error: { message: string, code?: number } = {\n        message: \"Can't update video file since videoFile is undefined.\"\n      }\n\n      this.player.tech(true).error = () => error as any\n      this.player.tech(true).trigger('error')\n\n      return\n\n\n      */\n    }\n\n    // Don't add the same video file once again\n    if (this.currentVideoFile !== undefined && this.currentVideoFile.magnetUri === videoFile.magnetUri) {\n      return\n    }\n\n    // Do not display error to user because we will have multiple fallback\n    this.disableErrorDisplay();\n\n    // Hack to \"simulate\" src link in video.js >= 6\n    // Without this, we can't play the video after pausing it\n    // https://github.com/videojs/video.js/blob/master/src/js/player.js#L1633\n    (this.player as any).src = () => true\n    const oldPlaybackRate = this.player.playbackRate()\n\n    const previousVideoFile = this.currentVideoFile\n    this.currentVideoFile = videoFile\n\n    // Don't try on iOS that does not support MediaSource\n    // Or don't use P2P if webtorrent is disabled\n    if (isIOS() || this.playerRefusedP2P) {\n      return this.fallbackToHttp(options, () => {\n        this.player.playbackRate(oldPlaybackRate)\n        return done()\n      })\n    }\n\n\n    this.addTorrent(this.currentVideoFile.magnetUri, previousVideoFile, options, () => {\n      this.player.playbackRate(oldPlaybackRate)\n      return done()\n    })\n\n    this.changeQuality()\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.currentVideoFile.resolution.id })\n  }\n\n  updateResolution (resolutionId: number, delay = 0) {\n    // Remember player state\n    const currentTime = this.player.currentTime()\n    const isPaused = this.player.paused()\n\n    // Hide bigPlayButton\n    if (!isPaused) {\n      this.player.bigPlayButton.hide()\n    }\n\n    // Audio-only (resolutionId === 0) gets special treatment\n    if (resolutionId === 0) {\n      // Audio-only: show poster, do not auto-hide controls\n      this.player.addClass('vjs-playing-audio-only-content')\n      this.player.posterImage.show()\n    } else {\n      // Hide poster to have black background\n      this.player.removeClass('vjs-playing-audio-only-content')\n      this.player.posterImage.hide()\n    }\n\n    const newVideoFile = this.videoFiles.find(f => f.resolution.id === resolutionId)\n    const options = {\n      forcePlay: false,\n      delay,\n      seek: currentTime + (delay / 1000)\n    }\n\n    this.updateVideoFile(newVideoFile, options)\n  }\n\n  flushVideoFile (videoFile: VideoFile, destroyRenderer = true) {\n    if (videoFile !== undefined && this.webtorrent.get(videoFile.magnetUri)) {\n      if (destroyRenderer === true && this.renderer && this.renderer.destroy) this.renderer.destroy()\n\n      this.webtorrent.remove(videoFile.magnetUri)\n    }\n  }\n\n  enableAutoResolution () {\n    this.autoResolution = true\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\n  }\n\n  disableAutoResolution (forbid = false) {\n    if (forbid === true) this.autoResolutionPossible = false\n\n    this.autoResolution = false\n    this.trigger('autoResolutionChange', { possible: this.autoResolutionPossible })\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\n  }\n\n  isAutoResolutionPossible () {\n    return this.autoResolutionPossible\n  }\n\n  getTorrent () {\n    return this.torrent\n  }\n\n  getCurrentVideoFile () {\n    return this.currentVideoFile\n  }\n\n  private addTorrent (\n    magnetOrTorrentUrl: string,\n    previousVideoFile: VideoFile,\n    options: PlayOptions,\n    done: Function\n  ) {\n    if (!magnetOrTorrentUrl) return this.fallbackToHttp(options, done)\n\n    const oldTorrent = this.torrent\n    const torrentOptions = {\n      // Don't use arrow function: it breaks webtorrent (that uses `new` keyword)\n      store: function (chunkLength: number, storeOpts: any) {\n        return new CacheChunkStore(new PeertubeChunkStore(chunkLength, storeOpts), {\n          max: 100\n        })\n      }\n    }\n\n    this.torrent = this.webtorrent.add(magnetOrTorrentUrl, torrentOptions, torrent => {\n      if (oldTorrent) {\n        // Pause the old torrent\n        this.stopTorrent(oldTorrent)\n\n        // We use a fake renderer so we download correct pieces of the next file\n        if(options.delay) \n          this.renderFileInFakeElement(torrent.files[ 0 ], options.delay)\n      }\n\n      // Render the video in a few seconds? (on resolution change for example, we wait some seconds of the new video resolution)\n      this.addTorrentDelay = setTimeout(() => {\n\n        // We don't need the fake renderer anymore\n        this.destroyFakeRenderer()\n\n        const paused = this.player.paused()\n\n        this.flushVideoFile(previousVideoFile)\n\n        // Update progress bar (just for the UI), do not wait rendering\n        if (options.seek) this.player.currentTime(options.seek)\n\n        const renderVideoOptions = { autoplay: false, controls: true }\n        renderVideo(torrent.files[ 0 ], this.playerElement, renderVideoOptions, (err, renderer) => {\n          this.renderer = renderer\n\n          if (err) return this.fallbackToHttp(options, done)\n\n          //this.playerElement.play()\n\n          setTimeout(() => {\n            return this.tryToPlay(err => {\n\n              if (err) return done(err)\n  \n              if (options.seek) this.seek(options.seek)\n              if (options.forcePlay === false && paused === true) this.player.pause()\n  \n              return done()\n            })\n          }, 10)\n         \n        })\n      }, options.delay || 0)\n    })\n\n    this.torrent.on('error', (err: any) => console.error(err))\n\n    this.torrent.on('warning', (err: any) => {\n\n      //// TEMP, TO DO\n\n      /*if (err.message.indexOf('Error connecting to wss') !== -1 || err.message.indexOf('Unsupported tracker protocol') !== -1) {\n        this.fallbackToHttp(options, done)\n        return\n      }*/\n\n      // We don't support HTTP tracker but we don't care -> we use the web socket tracker\n      if (err.message.indexOf('Unsupported tracker protocol') !== -1) return\n\n      // Users don't care about issues with WebRTC, but developers do so log it in the console\n      if (err.message.indexOf('Ice connection failed') !== -1) {\n        console.log(err)\n        return\n      }\n\n      // Magnet hash is not up to date with the torrent file, add directly the torrent file\n      if (err.message.indexOf('incorrect info hash') !== -1) {\n        console.error('Incorrect info hash detected, falling back to torrent file.')\n        const newOptions = { forcePlay: true, seek: options.seek }\n        return this.addTorrent(this.torrent[ 'xs' ], previousVideoFile, newOptions, done)\n      }\n\n      // Remote instance is down\n      if (err.message.indexOf('from xs param') !== -1) {\n        this.handleError(err)\n      }\n\n    })\n  }\n\n  private tryToPlay (done?: (err?: Error) => void) {\n\n    if (!done) done = function () {}\n\n    const playPromise = this.player.play()\n\n    if (playPromise !== undefined) {\n\n      return playPromise.then(() => done()).catch((err: Error) => {\n          if (err.message.indexOf('The play() request') !== -1) {\n            return\n          }\n\n          console.log(\"PAUSE\")\n          this.player.pause()\n          this.player.posterImage.show()\n          this.player.removeClass('vjs-has-autoplay')\n          this.player.removeClass('vjs-has-big-play-button-clicked')\n          this.player.removeClass('vjs-playing-audio-only-content')\n\n          return done()\n        })\n    }\n\n    return done()\n\n    \n  }\n\n  private seek (time: number) {\n    this.player.currentTime(time)\n    this.player.handleTechSeeked_()\n  }\n\n  private getAppropriateFile (averageDownloadSpeed?: number): VideoFile {\n    if (this.videoFiles === undefined) return undefined\n\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\n\n    if (files.length === 0) return undefined\n    if (files.length === 1) return files[0]\n\n    // Don't change the torrent if the player ended\n    if (this.torrent && this.torrent.progress === 1 && this.player.ended()) return this.currentVideoFile\n\n    if (!averageDownloadSpeed) averageDownloadSpeed = this.getAndSaveActualDownloadSpeed()\n\n    // Limit resolution according to player height\n    const playerHeight = this.playerElement.offsetHeight\n\n    // We take the first resolution just above the player height\n    // Example: player height is 530px, we want the 720p file instead of 480p\n    let maxResolution = files[0].resolution.id\n    for (let i = files.length - 1; i >= 0; i--) {\n      const resolutionId = files[i].resolution.id\n      if (resolutionId !== 0 && resolutionId >= playerHeight) {\n        maxResolution = resolutionId\n        break\n      }\n    }\n\n    // Filter videos we can play according to our screen resolution and bandwidth\n    const filteredFiles = files.filter(f => f.resolution.id <= maxResolution)\n                               .filter(f => {\n                                 const fileBitrate = (f.size / this.videoDuration)\n                                 let threshold = fileBitrate\n\n                                 // If this is for a higher resolution or an initial load: add a margin\n                                 if (!this.currentVideoFile || f.resolution.id > this.currentVideoFile.resolution.id) {\n                                   threshold += ((fileBitrate * this.CONSTANTS.AUTO_QUALITY_THRESHOLD_PERCENT) / 100)\n                                 }\n\n                                 return averageDownloadSpeed > threshold\n                               })\n\n    // If the download speed is too bad, return the lowest resolution we have\n    if (filteredFiles.length === 0) return videoFileMinByResolution(files)\n\n    return videoFileMaxByResolution(filteredFiles)\n  }\n\n  private getAndSaveActualDownloadSpeed () {\n    const start = Math.max(this.downloadSpeeds.length - this.CONSTANTS.BANDWIDTH_AVERAGE_NUMBER_OF_VALUES, 0)\n    const lastDownloadSpeeds = this.downloadSpeeds.slice(start, this.downloadSpeeds.length)\n    if (lastDownloadSpeeds.length === 0) return -1\n\n    const sum = lastDownloadSpeeds.reduce((a, b) => a + b)\n    const averageBandwidth = Math.round(sum / lastDownloadSpeeds.length)\n\n    // Save the average bandwidth for future use\n    saveAverageBandwidth(averageBandwidth)\n\n    return averageBandwidth\n  }\n\n  private initializePlayer () {\n    this.buildQualities()\n\n    if (this.autoplay) {\n      this.player.posterImage.hide()\n\n      return this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n\n    // Proxy first play\n    const oldPlay = this.player.play.bind(this.player);\n    (this.player as any).play = () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n      this.player.play = oldPlay\n\n      this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n  }\n\n  private runAutoQualityScheduler () {\n    this.autoQualityInterval = setInterval(() => {\n\n      // Not initialized or in HTTP fallback\n      if (this.torrent === undefined || this.torrent === null) return\n      if (this.autoResolution === false) return\n      if (this.isAutoResolutionObservation === true) return\n\n      const file = this.getAppropriateFile()\n      let changeResolution = false\n      let changeResolutionDelay = 0\n\n      // Lower resolution\n      if (this.isPlayerWaiting() && file.resolution.id < this.currentVideoFile.resolution.id) {\n        changeResolution = true\n      } else if (file.resolution.id > this.currentVideoFile.resolution.id) { // Higher resolution\n        changeResolution = true\n        changeResolutionDelay = this.CONSTANTS.AUTO_QUALITY_HIGHER_RESOLUTION_DELAY\n      }\n\n      if (changeResolution === true) {\n        this.updateResolution(file.resolution.id, changeResolutionDelay)\n\n        // Wait some seconds in observation of our new resolution\n        this.isAutoResolutionObservation = true\n\n        this.qualityObservationTimer = setTimeout(() => {\n          this.isAutoResolutionObservation = false\n        }, this.CONSTANTS.AUTO_QUALITY_OBSERVATION_TIME)\n      }\n    }, this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n  }\n\n  private isPlayerWaiting () {\n    return this.player && this.player.hasClass('vjs-waiting')\n  }\n\n  private runTorrentInfoScheduler () {\n    this.torrentInfoInterval = setInterval(() => {\n      \n\n      // Not initialized yet\n      if (this.torrent === undefined) return\n\n      // Http fallback\n      if (this.torrent === null) return this.player.trigger('p2pInfo', false)\n\n      // this.webtorrent.downloadSpeed because we need to take into account the potential old torrent too\n      if (this.webtorrent.downloadSpeed !== 0) this.downloadSpeeds.push(this.webtorrent.downloadSpeed)\n\n    \n\n      return this.player.trigger('p2pInfo', {\n        source: 'webtorrent',\n        http: {\n          downloadSpeed: 0,\n          uploadSpeed: 0,\n          downloaded: 0,\n          uploaded: 0\n        },\n        p2p: {\n          downloadSpeed: this.torrent.downloadSpeed,\n          numPeers: this.torrent.numPeers,\n          uploadSpeed: this.torrent.uploadSpeed,\n          downloaded: this.torrent.downloaded,\n          uploaded: this.torrent.uploaded\n        }\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private fallbackToHttp (options: PlayOptions, done?: Function) {\n\n\n    const paused = this.player.paused()\n\n    this.disableAutoResolution(true)\n\n    this.flushVideoFile(this.currentVideoFile, true)\n    this.torrent = null\n\n    // Enable error display now this is our last fallback\n    this.player.one('error', () => this.enableErrorDisplay())\n\n    const httpUrl = this.currentVideoFile.fileUrl\n    this.player.src = this.savePlayerSrcFunction\n    this.player.src(httpUrl)\n\n    this.changeQuality()\n\n    // We changed the source, so reinit captions\n    this.player.trigger('sourcechange')\n\n    return this.tryToPlay(err => {\n\n      if (err && done) return done(err)\n\n      if (options.seek) this.seek(options.seek)\n      if (options.forcePlay === false && paused === true) {\n        console.log(\"PLAUSE\")\n        this.player.pause()\n      }\n\n      if (done) return done()\n    })\n  }\n\n  private handleError (err: Error | string) {\n    return this.player.trigger('customError', { err })\n  }\n\n  private enableErrorDisplay () {\n    this.player.addClass('vjs-error-display-enabled')\n  }\n\n  private disableErrorDisplay () {\n    this.player.removeClass('vjs-error-display-enabled')\n  }\n\n  private pickAverageVideoFile () {\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\n\n    return this.videoFiles[Math.floor(this.videoFiles.length / 2)]\n  }\n\n  private stopTorrent (torrent: WebTorrent.Torrent) {\n    torrent.pause()\n    // Pause does not remove actual peers (in particular the webseed peer)\n    torrent.removePeer(torrent[ 'ws' ])\n  }\n\n  private renderFileInFakeElement (file: WebTorrent.TorrentFile, delay: number) {\n    this.destroyingFakeRenderer = false\n\n    const fakeVideoElem = document.createElement('video')\n    renderVideo(file, fakeVideoElem, { autoplay: false, controls: false }, (err, renderer) => {\n      this.fakeRenderer = renderer\n\n      // The renderer returns an error when we destroy it, so skip them\n      if (this.destroyingFakeRenderer === false && err) {\n        console.error('Cannot render new torrent in fake video element.', err)\n      }\n\n      // Load the future file at the correct time (in delay MS - 2 seconds)\n      fakeVideoElem.currentTime = this.player.currentTime() + (delay - 2000)\n    })\n  }\n\n  private destroyFakeRenderer () {\n    if (this.fakeRenderer) {\n      this.destroyingFakeRenderer = true\n\n      if (this.fakeRenderer.destroy) {\n        try {\n          this.fakeRenderer.destroy()\n        } catch (err) {\n          console.log('Cannot destroy correctly fake renderer.', err)\n        }\n      }\n      this.fakeRenderer = undefined\n    }\n  }\n\n  private buildQualities () {\n    const qualityLevelsPayload = []\n\n    for (const file of this.videoFiles) {\n      const representation = {\n        id: file.resolution.id,\n        label: this.buildQualityLabel(file),\n        height: file.resolution.id,\n        _enabled: true\n      }\n\n      this.player.qualityLevels().addQualityLevel(representation)\n\n      qualityLevelsPayload.push({\n        id: representation.id,\n        label: representation.label,\n        selected: false\n      })\n    }\n\n    const payload: LoadedQualityData = {\n      qualitySwitchCallback: (d: any) => this.qualitySwitchCallback(d),\n      qualityData: {\n        video: qualityLevelsPayload\n      }\n    }\n    this.player.tech(true).trigger('loadedqualitydata', payload)\n  }\n\n  private buildQualityLabel (file: VideoFile) {\n    let label = file.resolution.label\n\n    if (file.fps && file.fps >= 50) {\n      label += file.fps\n    }\n\n    return label\n  }\n\n  private qualitySwitchCallback (id: number) {\n    if (id === -1) {\n      if (this.autoResolutionPossible === true) this.enableAutoResolution()\n      return\n    }\n\n    this.disableAutoResolution()\n    this.updateResolution(id)\n  }\n\n  private changeQuality () {\n    const resolutionId = this.currentVideoFile.resolution.id\n    const qualityLevels = this.player.qualityLevels()\n\n    if (resolutionId === -1) {\n      qualityLevels.selectedIndex = -1\n      return\n    }\n\n    for (let i = 0; i < qualityLevels.length; i++) {\n      const q = qualityLevels[i]\n      if (q.height === resolutionId) qualityLevels.selectedIndex_ = i\n    }\n  }\n}\n\nvideojs.registerPlugin('webtorrent', WebTorrentPlugin)\nexport { WebTorrentPlugin }\n"],"sourceRoot":""}